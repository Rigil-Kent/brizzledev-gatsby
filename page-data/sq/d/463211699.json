{"data":{"allContentfulPortfolioProject":{"nodes":[{"title":"Yoink Web Comic Scraper","projectDescription":{"childMarkdownRemark":{"html":"<p>Yo!nk is a web comic scraper written in Python that boasts a robust command-line interface, web application and desktop app. It downloads comic images from supported web comic aggregate sites and compresses them into standard digital comic book archives (.cbr, .cbz) for consumption with readers similar to comicrack. The initial concept was born out of convenience and a need to automate some aspects of my media consumption - namely, the downloading portion.</p>\n<p>The original version of the application (Then called Ript) focused on torrent downloads, reading a list of files from either a json configuration or a simple text file to form an internal queue. After confirming a VPN connection by comparing your public IP address at different times, Yo!nk would load a predetermined number of downloads into qbittorent and delete the magnet link from the queue as they complete.</p>\n<p>After a few rounds of testing and some issues getting qbittorent to cooperate with WSL (1 and 2) the scope of the application switched to web scraping via the BeautifulSoup module as it depended too heavily on the installation status of qbittorent. Since the application was already capable of detecting and parsing magnet links, refactoring it to search for image files was trivial - the initial focus being on comic aggregate site <a href=\"http://readallcomics.com\" title=\"Read All Comics\">readallcomics.com</a>. The final outcome was a Flask-based web application called Save All Comics but was ultimately abandoned due to CloudFlare's DDOS protection - a current blocker.</p>\n<p>Yo!nk is the fusion between these two projects (though torrent functionality is temporarily on hold so as to prevent abuse) using the factory pattern to create classes for each download site that derives from a base Scraper class. The Comic scraper supports scraping from <a href=\"http://readallcomics.com\" title=\"Read All Comics\">readallcomics</a>, <a href=\"https://dragonballsupermanga.net/\" title=\"Dragonball Super Manga\">dragonballsupermanga.net</a> and <a href=\"https://dragonballsupermanga.net/\" title=\"Mangadex\">mangadex.tv</a>. While the torrent scraper class originally supported The Pirate Bay, the temptation for the average user to abuse it was too high so the class was removed from later builds.</p>\n<p>Development of this app is ongoing despite currently being blocked by CloudFlare's DDoS protection causing 503 errors.</p>"}},"projectImages":[{"url":"https://images.ctfassets.net/brio2pbottz7/44PqqyVtb5YMcaod0JUcVz/2566f93bc669bfa112f52637adf9b3ff/yoink03.jpg"},{"url":"https://images.ctfassets.net/brio2pbottz7/4TFFLl6nEZ2dP5WTh2gtT6/aaeaad85ccf049f21c791fc7e6cf5e78/yoink01.jpg"},{"url":"https://images.ctfassets.net/brio2pbottz7/1XUDppAVBgJkXplxSJAjyH/c505fa7bef5fa4962c108712eb6991d5/yoink02.png"}],"shortDescription":"Python-based web comic scraper and packager"},{"title":"Brizzle.dev Portfolio","projectDescription":{"childMarkdownRemark":{"html":"<p>My portfolio is my sandbox for experimentation.</p>\n<p><img src=\"//images.ctfassets.net/brio2pbottz7/6v2r8eS4TTcmQWJS81p6XM/8146f4d921fa20a7ca40041c5ea00cc5/brizzle.dev.01.PNG\" alt=\"Brizzle Dev Hero Image\"></p>\n<p>Originally self-hosted on my home server in a docker container, the current configuration is developed using the Gatsby SSG deployed to Github Pages - the biggest questions being \"Is this possible?\" and \"How can I make this possible?\"; cornerstones of my self study. In the event that the Github Pages endpoint becomes unavailable the request will then be forwarded to the original container still hosted on my server. I still may switch back as I've recently discovered that you can't send POST requests from a github page, rendering the contact form useless. Bummer.</p>\n<p><a href=\"https://www.contentful.com\" title=\"Contentful\">Contentful</a> via <a href=\"https://graphql.org/\" title=\"GraphQL\">GraphQL</a> is used for every piece of information from text to background images and styling is handled with SCSS which was surprisingly easy to use with Gatsby. If you're crafty and familiar with cheat code inputs in PC games you may find a hidden easter egg.</p>\n<p><img src=\"//images.ctfassets.net/brio2pbottz7/4Dp5Ppo2Ul9leqZD5Hsxaw/434295e4532468575c976395a5a7505c/brizzle.dev.04.PNG\" alt=\"Cheat Code\"></p>\n<p>Eventually this project will be refactored into becoming the dashboard/informational page for my home server experiementation.</p>"}},"projectImages":[{"url":"https://images.ctfassets.net/brio2pbottz7/6v2r8eS4TTcmQWJS81p6XM/8146f4d921fa20a7ca40041c5ea00cc5/brizzle.dev.01.PNG"},{"url":"https://images.ctfassets.net/brio2pbottz7/6nDn1mC5jtMlXTTDcZDifb/20eefbc9d3bfaba78ce9e96a1a25121e/brizzle.dev.02.PNG"},{"url":"https://images.ctfassets.net/brio2pbottz7/5zwIUDBoI7FjZwtdloEF6D/169a5fd8729f78a774c84e89cedd4c19/brizzle.dev.03.PNG"},{"url":"https://images.ctfassets.net/brio2pbottz7/4Dp5Ppo2Ul9leqZD5Hsxaw/434295e4532468575c976395a5a7505c/brizzle.dev.04.PNG"}],"shortDescription":"Github Pages hosted Gatsby based web portfolio"}]}}}